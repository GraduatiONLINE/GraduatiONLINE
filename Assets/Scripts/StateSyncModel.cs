using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class StateSyncModel {
    [RealtimeProperty(1, true, true)]
    private string _state;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class StateSyncModel : IModel {
    // Properties
    public string state {
        get { return _state; }
        set { if (value == _state) return; _stateShouldWrite = true; _state = value; FireStateDidChange(value); }
    }
    
    // Events
    public delegate void StateDidChange(StateSyncModel model, string value);
    public event         StateDidChange stateDidChange;
    
    private bool _stateShouldWrite;
    
    public StateSyncModel() {
    }
    
    // Events
    public void FireStateDidChange(string value) {
        try {
            if (stateDidChange != null)
                stateDidChange(this, value);
        } catch (System.Exception exception) {
            Debug.LogException(exception);
        }
    }
    
    // Serialization
    enum PropertyID {
        State = 1,
    }
    
    public int WriteLength(StreamContext context) {
        int length = 0;
        
        if (context.fullModel) {
            // Write all properties
            length += WriteStream.WriteStringLength((uint)PropertyID.State, _state);
        } else {
            // Unreliable properties
            if (context.unreliableChannel) {
                if (_stateShouldWrite) {
                    length += WriteStream.WriteStringLength((uint)PropertyID.State, _state);
                }
            }
        }
        
        return length;
    }
    
    public void Write(WriteStream stream, StreamContext context) {
        if (context.fullModel) {
            // Write all properties
            stream.WriteString((uint)PropertyID.State, _state);
            _stateShouldWrite = false;
        } else {
            // Unreliable properties
            if (context.unreliableChannel) {
                if (_stateShouldWrite) {
                    stream.WriteString((uint)PropertyID.State, _state);
                    _stateShouldWrite = false;
                }
            }
        }
    }
    
    public void Read(ReadStream stream, StreamContext context) {
        // Loop through each property and deserialize
        uint propertyID;
        while (stream.ReadNextPropertyID(out propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.State: {
                    string previousValue = _state;
                    
                    _state = stream.ReadString();
                    _stateShouldWrite = false;
                    
                    if (_state != previousValue)
                        FireStateDidChange(_state);
                    break;
                }
                default:
                    stream.SkipProperty();
                    break;
            }
        }
    }
}
/* ----- End Normal Autogenerated Code ----- */
