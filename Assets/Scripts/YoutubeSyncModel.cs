using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class YoutubeSyncModel {
    [RealtimeProperty(1, true, true)]
    private string _youtube;
}
/* ----- Begin Normal Autogenerated Code ----- */
public partial class YoutubeSyncModel : IModel {
    // Properties
    public string youtube {
        get { return _youtube; }
        set { if (value == _youtube) return; _youtubeShouldWrite = true; _youtube = value; FireYoutubeDidChange(value); }
    }
    
    // Events
    public delegate void YoutubeDidChange(YoutubeSyncModel model, string value);
    public event         YoutubeDidChange youtubeDidChange;
    
    private bool _youtubeShouldWrite;
    
    public YoutubeSyncModel() {
    }
    
    // Events
    public void FireYoutubeDidChange(string value) {
        try {
            if (youtubeDidChange != null)
                youtubeDidChange(this, value);
        } catch (System.Exception exception) {
            Debug.LogException(exception);
        }
    }
    
    // Serialization
    enum PropertyID {
        Youtube = 1,
    }
    
    public int WriteLength(StreamContext context) {
        int length = 0;
        
        if (context.fullModel) {
            // Write all properties
            length += WriteStream.WriteStringLength((uint)PropertyID.Youtube, _youtube);
        } else {
            // Unreliable properties
            if (context.unreliableChannel) {
                if (_youtubeShouldWrite) {
                    length += WriteStream.WriteStringLength((uint)PropertyID.Youtube, _youtube);
                }
            }
        }
        
        return length;
    }
    
    public void Write(WriteStream stream, StreamContext context) {
        if (context.fullModel) {
            // Write all properties
            stream.WriteString((uint)PropertyID.Youtube, _youtube);
            _youtubeShouldWrite = false;
        } else {
            // Unreliable properties
            if (context.unreliableChannel) {
                if (_youtubeShouldWrite) {
                    stream.WriteString((uint)PropertyID.Youtube, _youtube);
                    _youtubeShouldWrite = false;
                }
            }
        }
    }
    
    public void Read(ReadStream stream, StreamContext context) {
        // Loop through each property and deserialize
        uint propertyID;
        while (stream.ReadNextPropertyID(out propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.Youtube: {
                    string previousValue = _youtube;
                    
                    _youtube = stream.ReadString();
                    _youtubeShouldWrite = false;
                    
                    if (_youtube != previousValue)
                        FireYoutubeDidChange(_youtube);
                    break;
                }
                default:
                    stream.SkipProperty();
                    break;
            }
        }
    }
}
/* ----- End Normal Autogenerated Code ----- */
