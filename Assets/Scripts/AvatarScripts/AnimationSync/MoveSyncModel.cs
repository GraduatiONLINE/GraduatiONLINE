using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class MoveSyncModel
{
    [RealtimeProperty(1, false, true)]
    private string _move;

    // "ANIMATION_EPOCHSTAMP"
    [RealtimeProperty(3, true, true)]
    private string _lastAction;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class MoveSyncModel : IModel {
    // Properties
    public string move {
        get { return _move; }
        set { if (value == _move) return; _moveShouldWrite = true; _move = value; FireMoveDidChange(value); }
    }
    public string lastAction {
        get { return _cache.LookForValueInCache(_lastAction, entry => entry.lastActionSet, entry => entry.lastAction); }
        set { if (value == lastAction) return; _cache.UpdateLocalCache(entry => { entry.lastActionSet = true; entry.lastAction = value; return entry; }); FireLastActionDidChange(value); }
    }
    
    // Events
    public delegate void MoveDidChange(MoveSyncModel model, string value);
    public event         MoveDidChange moveDidChange;
    public delegate void LastActionDidChange(MoveSyncModel model, string value);
    public event         LastActionDidChange lastActionDidChange;
    
    // Delta updates
    private struct LocalCacheEntry {
        public bool   lastActionSet;
        public string lastAction;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache;
    
    private bool _moveShouldWrite;
    
    public MoveSyncModel() {
        _cache = new LocalChangeCache<LocalCacheEntry>();
    }
    
    // Events
    public void FireMoveDidChange(string value) {
        try {
            if (moveDidChange != null)
                moveDidChange(this, value);
        } catch (System.Exception exception) {
            Debug.LogException(exception);
        }
    }
    public void FireLastActionDidChange(string value) {
        try {
            if (lastActionDidChange != null)
                lastActionDidChange(this, value);
        } catch (System.Exception exception) {
            Debug.LogException(exception);
        }
    }
    
    // Serialization
    enum PropertyID {
        Move = 1,
        LastAction = 3,
    }
    
    public int WriteLength(StreamContext context) {
        int length = 0;
        
        if (context.fullModel) {
            // Mark unreliable properties as clean and flatten the in-flight cache.
            // TODO: Move this out of WriteLength() once we have a prepareToWrite method.
            _moveShouldWrite = false;
            _lastAction = lastAction;
            _cache.Clear();
            
            // Write all properties
            length += WriteStream.WriteStringLength((uint)PropertyID.Move, _move);
            length += WriteStream.WriteStringLength((uint)PropertyID.LastAction, _lastAction);
        } else {
            // Unreliable properties
            if (context.unreliableChannel) {
                if (_moveShouldWrite) {
                    length += WriteStream.WriteStringLength((uint)PropertyID.Move, _move);
                }
            }
            
            // Reliable properties
            if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.lastActionSet)
                    length += WriteStream.WriteStringLength((uint)PropertyID.LastAction, entry.lastAction);
            }
        }
        
        return length;
    }
    
    public void Write(WriteStream stream, StreamContext context) {
        if (context.fullModel) {
            // Write all properties
            stream.WriteString((uint)PropertyID.Move, _move);
            _moveShouldWrite = false;
            stream.WriteString((uint)PropertyID.LastAction, _lastAction);
        } else {
            // Unreliable properties
            if (context.unreliableChannel) {
                if (_moveShouldWrite) {
                    stream.WriteString((uint)PropertyID.Move, _move);
                    _moveShouldWrite = false;
                }
            }
            
            // Reliable properties
            if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.lastActionSet)
                    _cache.PushLocalCacheToInflight(context.updateID);
                
                if (entry.lastActionSet)
                    stream.WriteString((uint)PropertyID.LastAction, entry.lastAction);
            }
        }
    }
    
    public void Read(ReadStream stream, StreamContext context) {
        bool lastActionExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.lastActionSet);
        
        // Remove from in-flight
        if (context.deltaUpdatesOnly && context.reliableChannel)
            _cache.RemoveUpdateFromInflight(context.updateID);
        
        // Loop through each property and deserialize
        uint propertyID;
        while (stream.ReadNextPropertyID(out propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.Move: {
                    string previousValue = _move;
                    
                    _move = stream.ReadString();
                    _moveShouldWrite = false;
                    
                    if (_move != previousValue)
                        FireMoveDidChange(_move);
                    break;
                }
                case (uint)PropertyID.LastAction: {
                    string previousValue = _lastAction;
                    
                    _lastAction = stream.ReadString();
                    
                    if (!lastActionExistsInChangeCache && _lastAction != previousValue)
                        FireLastActionDidChange(_lastAction);
                    break;
                }
                default:
                    stream.SkipProperty();
                    break;
            }
        }
    }
}
/* ----- End Normal Autogenerated Code ----- */
