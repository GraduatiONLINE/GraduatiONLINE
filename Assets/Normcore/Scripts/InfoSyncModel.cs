using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class InfoSyncModel {
    [RealtimeProperty(1, false, true)]
    private string _name;
}
/* ----- Begin Normal Autogenerated Code ----- */
public partial class InfoSyncModel : IModel {
    // Properties
    public string name {
        get { return _name; }
        set { if (value == _name) return; _nameShouldWrite = true; _name = value; FireNameDidChange(value); }
    }
    
    // Events
    public delegate void NameDidChange(InfoSyncModel model, string value);
    public event         NameDidChange nameDidChange;
    
    private bool _nameShouldWrite;
    
    public InfoSyncModel() {
    }
    
    // Events
    public void FireNameDidChange(string value) {
        try {
            if (nameDidChange != null)
                nameDidChange(this, value);
        } catch (System.Exception exception) {
            Debug.LogException(exception);
        }
    }
    
    // Serialization
    enum PropertyID {
        Name = 1,
    }
    
    public int WriteLength(StreamContext context) {
        int length = 0;
        
        if (context.fullModel) {
            // Write all properties
            length += WriteStream.WriteStringLength((uint)PropertyID.Name, _name);
        } else {
            // Unreliable properties
            if (context.unreliableChannel) {
                if (_nameShouldWrite) {
                    length += WriteStream.WriteStringLength((uint)PropertyID.Name, _name);
                }
            }
        }
        
        return length;
    }
    
    public void Write(WriteStream stream, StreamContext context) {
        if (context.fullModel) {
            // Write all properties
            stream.WriteString((uint)PropertyID.Name, _name);
            _nameShouldWrite = false;
        } else {
            // Unreliable properties
            if (context.unreliableChannel) {
                if (_nameShouldWrite) {
                    stream.WriteString((uint)PropertyID.Name, _name);
                    _nameShouldWrite = false;
                }
            }
        }
    }
    
    public void Read(ReadStream stream, StreamContext context) {
        // Loop through each property and deserialize
        uint propertyID;
        while (stream.ReadNextPropertyID(out propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.Name: {
                    string previousValue = _name;
                    
                    _name = stream.ReadString();
                    _nameShouldWrite = false;
                    
                    if (_name != previousValue)
                        FireNameDidChange(_name);
                    break;
                }
                default:
                    stream.SkipProperty();
                    break;
            }
        }
    }
}
/* ----- End Normal Autogenerated Code ----- */
