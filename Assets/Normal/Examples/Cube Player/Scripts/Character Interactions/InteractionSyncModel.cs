using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class InteractionSyncModel
{
    [RealtimeProperty(1, true, true)]
    private string _interaction;
}
/* ----- Begin Normal Autogenerated Code ----- */
public partial class InteractionSyncModel : IModel
{
    // Properties
    public string interaction
    {
        get { return _cache.LookForValueInCache(_interaction, entry => entry.interactionSet, entry => entry.interaction); }
        set { if (value == interaction) return; _cache.UpdateLocalCache(entry => { entry.interactionSet = true; entry.interaction = value; return entry; }); FireInteractionDidChange(value); }
    }

    // Events
    public delegate void InteractionDidChange(InteractionSyncModel model, string value);
    public event InteractionDidChange interactionDidChange;

    // Delta updates
    private struct LocalCacheEntry
    {
        public bool interactionSet;
        public string interaction;
    }

    private LocalChangeCache<LocalCacheEntry> _cache;

    public InteractionSyncModel()
    {
        _cache = new LocalChangeCache<LocalCacheEntry>();
    }

    // Events
    public void FireInteractionDidChange(string value)
    {
        try
        {
            if (interactionDidChange != null)
                interactionDidChange(this, value);
        }
        catch (System.Exception exception)
        {
            Debug.LogException(exception);
        }
    }

    // Serialization
    enum PropertyID
    {
        Interaction = 1,
    }

    public int WriteLength(StreamContext context)
    {
        int length = 0;

        if (context.fullModel)
        {
            // Mark unreliable properties as clean and flatten the in-flight cache.
            // TODO: Move this out of WriteLength() once we have a prepareToWrite method.
            _interaction = interaction;
            _cache.Clear();

            // Write all properties
            length += WriteStream.WriteStringLength((uint)PropertyID.Interaction, _interaction);
        }
        else
        {
            // Reliable properties
            if (context.reliableChannel)
            {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.interactionSet)
                    length += WriteStream.WriteStringLength((uint)PropertyID.Interaction, entry.interaction);
            }
        }

        return length;
    }

    public void Write(WriteStream stream, StreamContext context)
    {
        if (context.fullModel)
        {
            // Write all properties
            stream.WriteString((uint)PropertyID.Interaction, _interaction);
        }
        else
        {
            // Reliable properties
            if (context.reliableChannel)
            {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.interactionSet)
                    _cache.PushLocalCacheToInflight(context.updateID);

                if (entry.interactionSet)
                    stream.WriteString((uint)PropertyID.Interaction, entry.interaction);
            }
        }
    }

    public void Read(ReadStream stream, StreamContext context)
    {
        bool interactionExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.interactionSet);

        // Remove from in-flight
        if (context.deltaUpdatesOnly && context.reliableChannel)
            _cache.RemoveUpdateFromInflight(context.updateID);

        // Loop through each property and deserialize
        uint propertyID;
        while (stream.ReadNextPropertyID(out propertyID))
        {
            switch (propertyID)
            {
                case (uint)PropertyID.Interaction:
                    {
                        string previousValue = _interaction;

                        _interaction = stream.ReadString();

                        if (!interactionExistsInChangeCache && _interaction != previousValue)
                            FireInteractionDidChange(_interaction);
                        break;
                    }
                default:
                    stream.SkipProperty();
                    break;
            }
        }
    }
}
/* ----- End Normal Autogenerated Code ----- */
