using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class MoveSyncModel
{
    [RealtimeProperty(1, false, true)]
    private string _move;
}
/* ----- Begin Normal Autogenerated Code ----- */
public partial class MoveSyncModel : IModel {
    // Properties
    public string move {
        get { return _move; }
        set { if (value == _move) return; _moveShouldWrite = true; _move = value; FireMoveDidChange(value); }
    }
    
    // Events
    public delegate void MoveDidChange(MoveSyncModel model, string value);
    public event         MoveDidChange moveDidChange;
    
    private bool _moveShouldWrite;
    
    public MoveSyncModel() {
    }
    
    // Events
    public void FireMoveDidChange(string value) {
        try {
            if (moveDidChange != null)
                moveDidChange(this, value);
        } catch (System.Exception exception) {
            Debug.LogException(exception);
        }
    }
    
    // Serialization
    enum PropertyID {
        Move = 1,
    }
    
    public int WriteLength(StreamContext context) {
        int length = 0;
        
        if (context.fullModel) {
            // Write all properties
            length += WriteStream.WriteStringLength((uint)PropertyID.Move, _move);
        } else {
            // Unreliable properties
            if (context.unreliableChannel) {
                if (_moveShouldWrite) {
                    length += WriteStream.WriteStringLength((uint)PropertyID.Move, _move);
                }
            }
        }
        
        return length;
    }
    
    public void Write(WriteStream stream, StreamContext context) {
        if (context.fullModel) {
            // Write all properties
            stream.WriteString((uint)PropertyID.Move, _move);
            _moveShouldWrite = false;
        } else {
            // Unreliable properties
            if (context.unreliableChannel) {
                if (_moveShouldWrite) {
                    stream.WriteString((uint)PropertyID.Move, _move);
                    _moveShouldWrite = false;
                }
            }
        }
    }
    
    public void Read(ReadStream stream, StreamContext context) {
        // Loop through each property and deserialize
        uint propertyID;
        while (stream.ReadNextPropertyID(out propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.Move: {
                    string previousValue = _move;
                    
                    _move = stream.ReadString();
                    _moveShouldWrite = false;
                    
                    if (_move != previousValue)
                        FireMoveDidChange(_move);
                    break;
                }
                default:
                    stream.SkipProperty();
                    break;
            }
        }
    }
}
/* ----- End Normal Autogenerated Code ----- */
