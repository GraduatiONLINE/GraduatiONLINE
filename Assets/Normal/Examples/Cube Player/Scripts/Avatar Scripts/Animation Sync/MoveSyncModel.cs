using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class MoveSyncModel
{
    [RealtimeProperty(1, false, true)]
    private Vector3 _move;
}
/* ----- Begin Normal Autogenerated Code ----- */
public partial class MoveSyncModel : IModel {
    // Properties
    public UnityEngine.Vector3 move {
        get { return _move; }
        set { if (value == _move) return; _moveShouldWrite = true; _move = value; FireMoveDidChange(value); }
    }
    
    // Events
    public delegate void MoveDidChange(MoveSyncModel model, UnityEngine.Vector3 value);
    public event         MoveDidChange moveDidChange;
    
    private bool _moveShouldWrite;
    
    public MoveSyncModel() {
    }
    
    // Events
    public void FireMoveDidChange(UnityEngine.Vector3 value) {
        try {
            if (moveDidChange != null)
                moveDidChange(this, value);
        } catch (System.Exception exception) {
            Debug.LogException(exception);
        }
    }
    
    // Serialization
    enum PropertyID {
        Move = 1,
    }
    
    public int WriteLength(StreamContext context) {
        int length = 0;
        
        if (context.fullModel) {
            // Write all properties
            length += WriteStream.WriteBytesLength((uint)PropertyID.Move, WriteStream.Vector3ToBytesLength());
        } else {
            // Unreliable properties
            if (context.unreliableChannel) {
                if (_moveShouldWrite) {
                    length += WriteStream.WriteBytesLength((uint)PropertyID.Move, WriteStream.Vector3ToBytesLength());
                }
            }
        }
        
        return length;
    }
    
    public void Write(WriteStream stream, StreamContext context) {
        if (context.fullModel) {
            // Write all properties
            stream.WriteBytes((uint)PropertyID.Move, WriteStream.Vector3ToBytes(_move));
            _moveShouldWrite = false;
        } else {
            // Unreliable properties
            if (context.unreliableChannel) {
                if (_moveShouldWrite) {
                    stream.WriteBytes((uint)PropertyID.Move, WriteStream.Vector3ToBytes(_move));
                    _moveShouldWrite = false;
                }
            }
        }
    }
    
    public void Read(ReadStream stream, StreamContext context) {
        // Loop through each property and deserialize
        uint propertyID;
        while (stream.ReadNextPropertyID(out propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.Move: {
                    UnityEngine.Vector3 previousValue = _move;
                    
                    _move = ReadStream.Vector3FromBytes(stream.ReadBytes());
                    _moveShouldWrite = false;
                    
                    if (_move != previousValue)
                        FireMoveDidChange(_move);
                    break;
                }
                default:
                    stream.SkipProperty();
                    break;
            }
        }
    }
}
/* ----- End Normal Autogenerated Code ----- */
